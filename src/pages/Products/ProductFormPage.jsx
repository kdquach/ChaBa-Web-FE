import React, { useState, useEffect } from "react";
import {
  Form,
  Input,
  Button,
  Select,
  Upload,
  InputNumber,
  Switch,
  message,
  Card,
  Row,
  Col,
  Space,
} from "antd";
import { UploadOutlined, SaveOutlined } from "@ant-design/icons";
import { useNavigate, useParams } from "react-router-dom";
import PageHeader from "../../components/PageHeader";
import LoadingSpinner from "../../components/LoadingSpinner";
import {
  createProduct,
  updateProduct,
  fetchProductById,
  fetchCategories,
} from "../../api/products";

const { TextArea } = Input;
const { Option } = Select;

const ProductFormPage = () => {
  const navigate = useNavigate();
  const { id, mode } = useParams(); // Get mode from URL
  const isEditing = Boolean(id) && mode === "edit";
  const isViewing = Boolean(id) && mode === "view";
  const [form] = Form.useForm();

  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [categories, setCategories] = useState([]);
  const [fileList, setFileList] = useState([]);

  // Load d·ªØ li·ªáu khi edit
  useEffect(() => {
    if (isEditing || isViewing) {
      loadProduct();
    }
    loadCategories();
  }, [id, isEditing, isViewing]);

  const loadProduct = async () => {
    try {
      setLoading(true);
      const response = await fetchProductById(id);
      console.log("Fetched product data:", response); // üî• debug
      // Set c√°c gi√° tr·ªã form t·ª´ response
      form.setFieldsValue({
        name: response.name,
        price: response.price,
        status: response.status,
        description: response.description,
        categoryId: response.categoryId,
        // Kh√¥ng c·∫ßn x·ª≠ l√Ω ingredients v√¨ API kh√¥ng tr·∫£ v·ªÅ field n√†y
      });

      // Set image to fileList if exists
      if (response.image) {
        setFileList([
          {
            uid: "-1",
            name: "product-image",
            status: "done",
            url: response.image, // S·ª≠ d·ª•ng tr·ª±c ti·∫øp URL t·ª´ API
          },
        ]);
      }
    } catch (error) {
      console.error("Error loading product:", error);
      message.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·∫£n ph·∫©m");
      navigate("/products");
    } finally {
      setLoading(false);
    }
  };

  const loadCategories = async () => {
    try {
      const response = await fetchCategories();
      if (response?.results) {
        setCategories(response.results);
      } else {
        console.error("Invalid categories response format:", response);
        setCategories([]);
      }
    } catch (error) {
      console.error("Error loading categories:", error);
    }
  };

  // X·ª≠ l√Ω upload ·∫£nh
  const handleUpload = ({ fileList: newFileList }) => {
    setFileList(newFileList);
  };

  const beforeUpload = (file) => {
    const isImage = file.type.startsWith("image/");
    if (!isImage) {
      message.error("Ch·ªâ c√≥ th·ªÉ upload file ·∫£nh!");
      return false;
    }
    const isLt2M = file.size / 1024 / 1024 < 2;
    if (!isLt2M) {
      message.error("K√≠ch th∆∞·ªõc ·∫£nh ph·∫£i nh·ªè h∆°n 2MB!");
      return false;
    }
    return false; // Prevent auto upload
  };

  // X·ª≠ l√Ω submit form
  const handleSubmit = async (values) => {
    try {
      setSubmitting(true);

      // X·ª≠ l√Ω recipe th√†nh array
      const recipe = values.recipe
        ? values.recipe
            .split(",")
            .map((item) => item.trim())
            .filter(Boolean)
        : [];

      const productData = {
        ...values,
        recipe,
        image: fileList[0],
      };

      console.log("Submitting product data:", productData); // üî• debug

      if (isEditing) {
        await updateProduct(id, productData);
        message.success("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
      } else {
        await createProduct(productData);
        message.success("T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!");
      }

      navigate("/products");
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi l∆∞u s·∫£n ph·∫©m");
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div>
      <PageHeader
        title={
          isViewing
            ? "Chi ti·∫øt s·∫£n ph·∫©m"
            : isEditing
            ? "Ch·ªânh s·ª≠a s·∫£n ph·∫©m"
            : "Th√™m s·∫£n ph·∫©m m·ªõi"
        }
        subtitle={
          isViewing
            ? "Xem th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m"
            : isEditing
            ? "C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m"
            : "Nh·∫≠p th√¥ng tin s·∫£n ph·∫©m m·ªõi"
        }
        showBack
        backPath="/products"
      />

      <Row gutter={24}>
        <Col xs={24} lg={16}>
          <Card title="Th√¥ng tin c∆° b·∫£n">
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSubmit}
              autoComplete="off"
              initialValues={{
                status: "ƒêang b√°n",
                price: 0,
              }}
            >
              <Form.Item
                label="T√™n s·∫£n ph·∫©m"
                name="name"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m!" },
                ]}
              >
                <Input placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m" disabled={isViewing} />
              </Form.Item>

              <Form.Item
                label="M√¥ t·∫£"
                name="description"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m!" },
                ]}
              >
                <TextArea
                  rows={4}
                  placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt"
                  disabled={isViewing}
                />
              </Form.Item>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    label="Danh m·ª•c"
                    name="categoryId"
                    rules={[
                      { required: true, message: "Vui l√≤ng ch·ªçn danh m·ª•c!" },
                    ]}
                  >
                    <Select
                      placeholder="Ch·ªçn danh m·ª•c"
                      disabled={isViewing}
                      showSearch
                      optionFilterProp="children"
                    >
                      {categories.map((category) => (
                        <Option key={category.id} value={category.id}>
                          {category.name}
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>

                <Col xs={24} sm={12}>
                  <Form.Item
                    label="Gi√° b√°n (‚Ç´)"
                    name="price"
                    rules={[
                      { required: true, message: "Vui l√≤ng nh·∫≠p gi√° b√°n!" },
                    ]}
                  >
                    <InputNumber
                      style={{ width: "100%" }}
                      placeholder="Nh·∫≠p gi√° b√°n"
                      disabled={isViewing}
                      formatter={(value) =>
                        `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                      }
                      parser={(value) => value.replace(/\$\s?|(,*)/g, "")}
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="Nguy√™n li·ªáu ch√≠nh"
                name="recipe"
                tooltip="Nh·∫≠p c√°c nguy√™n li·ªáu, c√°ch nhau b·∫±ng d·∫•u ph·∫©y"
              >
                <Input
                  placeholder="V√≠ d·ª•: Tr√† ƒëen, S·ªØa t∆∞∆°i, ƒê∆∞·ªùng"
                  disabled={isViewing}
                />
              </Form.Item>

              <Form.Item
                label="Tr·∫°ng th√°i"
                name="status"
                valuePropName="checked"
                getValueFromEvent={(checked) =>
                  checked ? "ƒêang b√°n" : "Ng·ª´ng b√°n"
                }
                getValueProps={(value) => ({ checked: value === "ƒêang b√°n" })}
              >
                <Switch
                  checkedChildren="ƒêang b√°n"
                  unCheckedChildren="Ng·ª´ng b√°n"
                  disabled={isViewing}
                />
              </Form.Item>

              <Form.Item style={{ marginBottom: 0 }}>
                <Space>
                  <Button onClick={() => navigate("/products")}>
                    {isViewing ? "Quay l·∫°i" : "H·ªßy"}
                  </Button>
                  {!isViewing && (
                    <Button
                      type="primary"
                      htmlType="submit"
                      loading={submitting}
                      icon={<SaveOutlined />}
                    >
                      {isEditing ? "C·∫≠p nh·∫≠t" : "T·∫°o s·∫£n ph·∫©m"}
                    </Button>
                  )}
                </Space>
              </Form.Item>
            </Form>
          </Card>
        </Col>

        <Col xs={24} lg={8}>
          <Card title="H√¨nh ·∫£nh s·∫£n ph·∫©m">
            {isViewing ? (
              // In view mode, just show the image
              fileList.length > 0 && (
                <img
                  src={fileList[0].url}
                  alt="Product"
                  style={{ width: "100%", maxWidth: 300 }}
                />
              )
            ) : (
              // In edit/create mode, show upload component
              <Upload
                listType="picture-card"
                fileList={fileList}
                onChange={handleUpload}
                beforeUpload={beforeUpload}
                maxCount={1}
                disabled={isViewing}
              >
                {fileList.length < 1 && (
                  <div>
                    <UploadOutlined />
                    <div style={{ marginTop: 8 }}>T·∫£i l√™n h√¨nh ·∫£nh</div>
                  </div>
                )}
              </Upload>
            )}
            {!isViewing && (
              <div style={{ fontSize: 12, color: "#888", marginTop: 8 }}>
                * Ch·ªâ h·ªó tr·ª£ ƒë·ªãnh d·∫°ng JPG, PNG
                <br />* K√≠ch th∆∞·ªõc t·ªëi ƒëa 2MB
              </div>
            )}
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default ProductFormPage;
